// <auto-generated />
using System;
using Blanketomat.API.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blanketomat.API.Migrations
{
    [DbContext(typeof(BlanketomatContext))]
    partial class BlanketomatContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AsistentKomentar", b =>
                {
                    b.Property<int>("AsistentiLikedId")
                        .HasColumnType("int");

                    b.Property<int>("LajkovaniKomentariId")
                        .HasColumnType("int");

                    b.HasKey("AsistentiLikedId", "LajkovaniKomentariId");

                    b.HasIndex("LajkovaniKomentariId");

                    b.ToTable("AsistentKomentar");
                });

            modelBuilder.Entity("AsistentOdgovor", b =>
                {
                    b.Property<int>("AsistentiVerifikovaliId")
                        .HasColumnType("int");

                    b.Property<int>("LajkovaniOdgovoriId")
                        .HasColumnType("int");

                    b.HasKey("AsistentiVerifikovaliId", "LajkovaniOdgovoriId");

                    b.HasIndex("LajkovaniOdgovoriId");

                    b.ToTable("AsistentOdgovor");
                });

            modelBuilder.Entity("AsistentPredmet", b =>
                {
                    b.Property<int>("AsistentiId")
                        .HasColumnType("int");

                    b.Property<int>("PredmetiId")
                        .HasColumnType("int");

                    b.HasKey("AsistentiId", "PredmetiId");

                    b.HasIndex("PredmetiId");

                    b.ToTable("AsistentPredmet");
                });

            modelBuilder.Entity("AsistentSmer", b =>
                {
                    b.Property<int>("AsistentiId")
                        .HasColumnType("int");

                    b.Property<int>("SmeroviId")
                        .HasColumnType("int");

                    b.HasKey("AsistentiId", "SmeroviId");

                    b.HasIndex("SmeroviId");

                    b.ToTable("AsistentSmer");
                });

            modelBuilder.Entity("BlanketPitanje", b =>
                {
                    b.Property<int>("BlanketiId")
                        .HasColumnType("int");

                    b.Property<int>("PitanjaId")
                        .HasColumnType("int");

                    b.HasKey("BlanketiId", "PitanjaId");

                    b.HasIndex("PitanjaId");

                    b.ToTable("BlanketPitanje");
                });

            modelBuilder.Entity("BlanketSlika", b =>
                {
                    b.Property<int>("BlanketiId")
                        .HasColumnType("int");

                    b.Property<int>("SlikeId")
                        .HasColumnType("int");

                    b.HasKey("BlanketiId", "SlikeId");

                    b.HasIndex("SlikeId");

                    b.ToTable("BlanketSlika");
                });

            modelBuilder.Entity("BlanketZadatak", b =>
                {
                    b.Property<int>("BlanketiId")
                        .HasColumnType("int");

                    b.Property<int>("ZadaciId")
                        .HasColumnType("int");

                    b.HasKey("BlanketiId", "ZadaciId");

                    b.HasIndex("ZadaciId");

                    b.ToTable("BlanketZadatak");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Administrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Administratori");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Akreditacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Akreditacije");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Asistent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("KatedraId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KatedraId");

                    b.ToTable("Asistenti");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Blanket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IspitniRokId")
                        .HasColumnType("int");

                    b.Property<string>("Kategorija")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OblastId")
                        .HasColumnType("int");

                    b.Property<int?>("PodoblastId")
                        .HasColumnType("int");

                    b.Property<int?>("PredmetId")
                        .HasColumnType("int");

                    b.Property<string>("Putanja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("IspitniRokId");

                    b.HasIndex("OblastId");

                    b.HasIndex("PodoblastId");

                    b.HasIndex("PredmetId");

                    b.ToTable("Blanketi");
                });

            modelBuilder.Entity("Blanketomat.API.Models.IspitniRok", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("IspitniRokovi");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Katedra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Katedre");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Komentar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlanketId")
                        .HasColumnType("int");

                    b.Property<int>("Lajkovi")
                        .HasColumnType("int");

                    b.Property<int?>("StudentPostavioId")
                        .HasColumnType("int");

                    b.Property<string>("Tekst")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("BlanketId");

                    b.HasIndex("StudentPostavioId");

                    b.ToTable("Komentari");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Oblast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PredmetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PredmetId");

                    b.ToTable("Oblasti");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Odgovor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("KomentarId")
                        .HasColumnType("int");

                    b.Property<int>("Lajkovi")
                        .HasColumnType("int");

                    b.Property<int?>("StudentPostavioId")
                        .HasColumnType("int");

                    b.Property<string>("Tekst")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("KomentarId");

                    b.HasIndex("StudentPostavioId");

                    b.ToTable("Odgovori");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Pitanje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OblastId")
                        .HasColumnType("int");

                    b.Property<string>("Tekst")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("OblastId");

                    b.ToTable("Pitanja");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Podoblast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OblastId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OblastId");

                    b.ToTable("Podoblasti");
                });

            modelBuilder.Entity("Blanketomat.API.Models.PonavljanjeIspitnogRoka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Datum")
                        .HasColumnType("date");

                    b.Property<int?>("IspitniRokId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("IspitniRokId");

                    b.ToTable("PonavljanjaIspitnihRokova");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Predmet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AkreditacijaId")
                        .HasColumnType("int");

                    b.Property<string>("Godina")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SmerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AkreditacijaId");

                    b.HasIndex("SmerId");

                    b.ToTable("Predmeti");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Profesor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("KatedraId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KatedraId");

                    b.ToTable("Profesori");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Slika", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("KomentarId")
                        .HasColumnType("int");

                    b.Property<int?>("OdgovorId")
                        .HasColumnType("int");

                    b.Property<int?>("PitanjeId")
                        .HasColumnType("int");

                    b.Property<string>("Putanja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ZadatakId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KomentarId");

                    b.HasIndex("OdgovorId");

                    b.HasIndex("PitanjeId");

                    b.HasIndex("ZadatakId");

                    b.ToTable("Slike");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Smer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("KatedraId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("KatedraId");

                    b.ToTable("Smerovi");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AkreditacijaId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("SmerId")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AkreditacijaId");

                    b.HasIndex("SmerId");

                    b.ToTable("Studenti");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Zadatak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OblastId")
                        .HasColumnType("int");

                    b.Property<string>("Tekst")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("OblastId");

                    b.ToTable("Zadaci");
                });

            modelBuilder.Entity("KomentarProfesor", b =>
                {
                    b.Property<int>("LajkovaniKomentariId")
                        .HasColumnType("int");

                    b.Property<int>("ProfesoriLikedId")
                        .HasColumnType("int");

                    b.HasKey("LajkovaniKomentariId", "ProfesoriLikedId");

                    b.HasIndex("ProfesoriLikedId");

                    b.ToTable("KomentarProfesor");
                });

            modelBuilder.Entity("OdgovorProfesor", b =>
                {
                    b.Property<int>("LajkovaniOdgovoriId")
                        .HasColumnType("int");

                    b.Property<int>("ProfesoriVerifikovaliId")
                        .HasColumnType("int");

                    b.HasKey("LajkovaniOdgovoriId", "ProfesoriVerifikovaliId");

                    b.HasIndex("ProfesoriVerifikovaliId");

                    b.ToTable("OdgovorProfesor");
                });

            modelBuilder.Entity("PodoblastZadatak", b =>
                {
                    b.Property<int>("PodoblastId")
                        .HasColumnType("int");

                    b.Property<int>("ZadaciId")
                        .HasColumnType("int");

                    b.HasKey("PodoblastId", "ZadaciId");

                    b.HasIndex("ZadaciId");

                    b.ToTable("PodoblastZadatak");
                });

            modelBuilder.Entity("PredmetProfesor", b =>
                {
                    b.Property<int>("PredmetiId")
                        .HasColumnType("int");

                    b.Property<int>("ProfesoriId")
                        .HasColumnType("int");

                    b.HasKey("PredmetiId", "ProfesoriId");

                    b.HasIndex("ProfesoriId");

                    b.ToTable("PredmetProfesor");
                });

            modelBuilder.Entity("PredmetStudent", b =>
                {
                    b.Property<int>("PredmetiId")
                        .HasColumnType("int");

                    b.Property<int>("StudentiId")
                        .HasColumnType("int");

                    b.HasKey("PredmetiId", "StudentiId");

                    b.HasIndex("StudentiId");

                    b.ToTable("PredmetStudent");
                });

            modelBuilder.Entity("ProfesorSmer", b =>
                {
                    b.Property<int>("ProfesoriId")
                        .HasColumnType("int");

                    b.Property<int>("SmeroviId")
                        .HasColumnType("int");

                    b.HasKey("ProfesoriId", "SmeroviId");

                    b.HasIndex("SmeroviId");

                    b.ToTable("ProfesorSmer");
                });

            modelBuilder.Entity("AsistentKomentar", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Asistent", null)
                        .WithMany()
                        .HasForeignKey("AsistentiLikedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blanketomat.API.Models.Komentar", null)
                        .WithMany()
                        .HasForeignKey("LajkovaniKomentariId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AsistentOdgovor", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Asistent", null)
                        .WithMany()
                        .HasForeignKey("AsistentiVerifikovaliId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blanketomat.API.Models.Odgovor", null)
                        .WithMany()
                        .HasForeignKey("LajkovaniOdgovoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AsistentPredmet", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Asistent", null)
                        .WithMany()
                        .HasForeignKey("AsistentiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blanketomat.API.Models.Predmet", null)
                        .WithMany()
                        .HasForeignKey("PredmetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AsistentSmer", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Asistent", null)
                        .WithMany()
                        .HasForeignKey("AsistentiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blanketomat.API.Models.Smer", null)
                        .WithMany()
                        .HasForeignKey("SmeroviId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlanketPitanje", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Blanket", null)
                        .WithMany()
                        .HasForeignKey("BlanketiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blanketomat.API.Models.Pitanje", null)
                        .WithMany()
                        .HasForeignKey("PitanjaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlanketSlika", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Blanket", null)
                        .WithMany()
                        .HasForeignKey("BlanketiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blanketomat.API.Models.Slika", null)
                        .WithMany()
                        .HasForeignKey("SlikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlanketZadatak", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Blanket", null)
                        .WithMany()
                        .HasForeignKey("BlanketiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blanketomat.API.Models.Zadatak", null)
                        .WithMany()
                        .HasForeignKey("ZadaciId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blanketomat.API.Models.Asistent", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Katedra", "Katedra")
                        .WithMany("Asistenti")
                        .HasForeignKey("KatedraId");

                    b.Navigation("Katedra");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Blanket", b =>
                {
                    b.HasOne("Blanketomat.API.Models.PonavljanjeIspitnogRoka", "IspitniRok")
                        .WithMany("Blanketi")
                        .HasForeignKey("IspitniRokId");

                    b.HasOne("Blanketomat.API.Models.Oblast", null)
                        .WithMany("Blanketi")
                        .HasForeignKey("OblastId");

                    b.HasOne("Blanketomat.API.Models.Podoblast", null)
                        .WithMany("Blanketi")
                        .HasForeignKey("PodoblastId");

                    b.HasOne("Blanketomat.API.Models.Predmet", "Predmet")
                        .WithMany("Blanketi")
                        .HasForeignKey("PredmetId");

                    b.Navigation("IspitniRok");

                    b.Navigation("Predmet");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Komentar", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Blanket", "Blanket")
                        .WithMany("Komentari")
                        .HasForeignKey("BlanketId");

                    b.HasOne("Blanketomat.API.Models.Student", "StudentPostavio")
                        .WithMany("PostavljeniKomentari")
                        .HasForeignKey("StudentPostavioId");

                    b.Navigation("Blanket");

                    b.Navigation("StudentPostavio");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Oblast", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Predmet", "Predmet")
                        .WithMany("Oblasti")
                        .HasForeignKey("PredmetId");

                    b.Navigation("Predmet");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Odgovor", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Komentar", "Komentar")
                        .WithMany("Odgovori")
                        .HasForeignKey("KomentarId");

                    b.HasOne("Blanketomat.API.Models.Student", "StudentPostavio")
                        .WithMany("PostavljeniOdgovori")
                        .HasForeignKey("StudentPostavioId");

                    b.Navigation("Komentar");

                    b.Navigation("StudentPostavio");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Pitanje", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Oblast", "Oblast")
                        .WithMany("Pitanja")
                        .HasForeignKey("OblastId");

                    b.Navigation("Oblast");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Podoblast", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Oblast", "Oblast")
                        .WithMany("Podoblasti")
                        .HasForeignKey("OblastId");

                    b.Navigation("Oblast");
                });

            modelBuilder.Entity("Blanketomat.API.Models.PonavljanjeIspitnogRoka", b =>
                {
                    b.HasOne("Blanketomat.API.Models.IspitniRok", "IspitniRok")
                        .WithMany("Ponavljanja")
                        .HasForeignKey("IspitniRokId");

                    b.Navigation("IspitniRok");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Predmet", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Akreditacija", "Akreditacija")
                        .WithMany("Predmeti")
                        .HasForeignKey("AkreditacijaId");

                    b.HasOne("Blanketomat.API.Models.Smer", "Smer")
                        .WithMany("Predmeti")
                        .HasForeignKey("SmerId");

                    b.Navigation("Akreditacija");

                    b.Navigation("Smer");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Profesor", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Katedra", "Katedra")
                        .WithMany("Profesori")
                        .HasForeignKey("KatedraId");

                    b.Navigation("Katedra");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Slika", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Komentar", "Komentar")
                        .WithMany("Slika")
                        .HasForeignKey("KomentarId");

                    b.HasOne("Blanketomat.API.Models.Odgovor", "Odgovor")
                        .WithMany("Slike")
                        .HasForeignKey("OdgovorId");

                    b.HasOne("Blanketomat.API.Models.Pitanje", "Pitanje")
                        .WithMany("Slika")
                        .HasForeignKey("PitanjeId");

                    b.HasOne("Blanketomat.API.Models.Zadatak", "Zadatak")
                        .WithMany("Slika")
                        .HasForeignKey("ZadatakId");

                    b.Navigation("Komentar");

                    b.Navigation("Odgovor");

                    b.Navigation("Pitanje");

                    b.Navigation("Zadatak");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Smer", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Katedra", "Katedra")
                        .WithMany("Smerovi")
                        .HasForeignKey("KatedraId");

                    b.Navigation("Katedra");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Student", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Akreditacija", "Akreditacija")
                        .WithMany("Studenti")
                        .HasForeignKey("AkreditacijaId");

                    b.HasOne("Blanketomat.API.Models.Smer", "Smer")
                        .WithMany("Studenti")
                        .HasForeignKey("SmerId");

                    b.Navigation("Akreditacija");

                    b.Navigation("Smer");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Zadatak", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Oblast", "Oblast")
                        .WithMany("Zadaci")
                        .HasForeignKey("OblastId");

                    b.Navigation("Oblast");
                });

            modelBuilder.Entity("KomentarProfesor", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Komentar", null)
                        .WithMany()
                        .HasForeignKey("LajkovaniKomentariId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blanketomat.API.Models.Profesor", null)
                        .WithMany()
                        .HasForeignKey("ProfesoriLikedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OdgovorProfesor", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Odgovor", null)
                        .WithMany()
                        .HasForeignKey("LajkovaniOdgovoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blanketomat.API.Models.Profesor", null)
                        .WithMany()
                        .HasForeignKey("ProfesoriVerifikovaliId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PodoblastZadatak", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Podoblast", null)
                        .WithMany()
                        .HasForeignKey("PodoblastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blanketomat.API.Models.Zadatak", null)
                        .WithMany()
                        .HasForeignKey("ZadaciId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PredmetProfesor", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Predmet", null)
                        .WithMany()
                        .HasForeignKey("PredmetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blanketomat.API.Models.Profesor", null)
                        .WithMany()
                        .HasForeignKey("ProfesoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PredmetStudent", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Predmet", null)
                        .WithMany()
                        .HasForeignKey("PredmetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blanketomat.API.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfesorSmer", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Profesor", null)
                        .WithMany()
                        .HasForeignKey("ProfesoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blanketomat.API.Models.Smer", null)
                        .WithMany()
                        .HasForeignKey("SmeroviId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blanketomat.API.Models.Akreditacija", b =>
                {
                    b.Navigation("Predmeti");

                    b.Navigation("Studenti");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Blanket", b =>
                {
                    b.Navigation("Komentari");
                });

            modelBuilder.Entity("Blanketomat.API.Models.IspitniRok", b =>
                {
                    b.Navigation("Ponavljanja");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Katedra", b =>
                {
                    b.Navigation("Asistenti");

                    b.Navigation("Profesori");

                    b.Navigation("Smerovi");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Komentar", b =>
                {
                    b.Navigation("Odgovori");

                    b.Navigation("Slika");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Oblast", b =>
                {
                    b.Navigation("Blanketi");

                    b.Navigation("Pitanja");

                    b.Navigation("Podoblasti");

                    b.Navigation("Zadaci");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Odgovor", b =>
                {
                    b.Navigation("Slike");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Pitanje", b =>
                {
                    b.Navigation("Slika");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Podoblast", b =>
                {
                    b.Navigation("Blanketi");
                });

            modelBuilder.Entity("Blanketomat.API.Models.PonavljanjeIspitnogRoka", b =>
                {
                    b.Navigation("Blanketi");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Predmet", b =>
                {
                    b.Navigation("Blanketi");

                    b.Navigation("Oblasti");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Smer", b =>
                {
                    b.Navigation("Predmeti");

                    b.Navigation("Studenti");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Student", b =>
                {
                    b.Navigation("PostavljeniKomentari");

                    b.Navigation("PostavljeniOdgovori");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Zadatak", b =>
                {
                    b.Navigation("Slika");
                });
#pragma warning restore 612, 618
        }
    }
}
