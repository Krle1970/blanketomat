// <auto-generated />
using System;
using Blanketomat.API.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blanketomat.API.Migrations
{
    [DbContext(typeof(BlanketomatContext))]
    [Migration("20240504125137_V1")]
    partial class V1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AsistentPredmet", b =>
                {
                    b.Property<int>("AsistentiId")
                        .HasColumnType("int");

                    b.Property<int>("PredmetiId")
                        .HasColumnType("int");

                    b.HasKey("AsistentiId", "PredmetiId");

                    b.HasIndex("PredmetiId");

                    b.ToTable("AsistentPredmet");
                });

            modelBuilder.Entity("BlanketPitanje", b =>
                {
                    b.Property<int>("BlanketiId")
                        .HasColumnType("int");

                    b.Property<int>("PitanjaId")
                        .HasColumnType("int");

                    b.HasKey("BlanketiId", "PitanjaId");

                    b.HasIndex("PitanjaId");

                    b.ToTable("BlanketPitanje");
                });

            modelBuilder.Entity("BlanketZadatak", b =>
                {
                    b.Property<int>("BlanketiId")
                        .HasColumnType("int");

                    b.Property<int>("ZadaciId")
                        .HasColumnType("int");

                    b.HasKey("BlanketiId", "ZadaciId");

                    b.HasIndex("ZadaciId");

                    b.ToTable("BlanketZadatak");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Administrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Administratori");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Akreditacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Akreditacije");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Asistent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("SmerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SmerId");

                    b.ToTable("Asistenti");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Blanket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IspitniRokId")
                        .HasColumnType("int");

                    b.Property<string>("Kategorija")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("OblastId")
                        .HasColumnType("int");

                    b.Property<int?>("PodoblastId")
                        .HasColumnType("int");

                    b.Property<string>("Tip")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("IspitniRokId");

                    b.HasIndex("OblastId");

                    b.HasIndex("PodoblastId");

                    b.ToTable("Blanketi");
                });

            modelBuilder.Entity("Blanketomat.API.Models.IspitniRok", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("IspitniRokovi");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Oblast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Oblasti");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Pitanje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OblastId")
                        .HasColumnType("int");

                    b.Property<int?>("SlikaId")
                        .HasColumnType("int");

                    b.Property<string>("Tekst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OblastId");

                    b.HasIndex("SlikaId");

                    b.ToTable("Pitanja");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Podoblast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Podoblasti");
                });

            modelBuilder.Entity("Blanketomat.API.Models.PonavljanjeRoka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Datum")
                        .HasColumnType("date");

                    b.Property<int?>("IspitniRokId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IspitniRokId");

                    b.ToTable("Ponavljanja");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Predmet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AkreditacijaId")
                        .HasColumnType("int");

                    b.Property<string>("Godina")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SmerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AkreditacijaId");

                    b.HasIndex("SmerId");

                    b.ToTable("Predmeti");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Profesor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("SmerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SmerId");

                    b.ToTable("Profesori");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Slika", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PutanjaDoSlike")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Slike");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Smer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Smerovi");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AkreditacijaId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("SmerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AkreditacijaId");

                    b.HasIndex("SmerId");

                    b.ToTable("Studenti");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Zadatak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OblastId")
                        .HasColumnType("int");

                    b.Property<int?>("PodoblastId")
                        .HasColumnType("int");

                    b.Property<int?>("SlikaId")
                        .HasColumnType("int");

                    b.Property<string>("Tekst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OblastId");

                    b.HasIndex("PodoblastId");

                    b.HasIndex("SlikaId");

                    b.ToTable("Zadaci");
                });

            modelBuilder.Entity("PredmetProfesor", b =>
                {
                    b.Property<int>("PredmetiId")
                        .HasColumnType("int");

                    b.Property<int>("ProfesoriId")
                        .HasColumnType("int");

                    b.HasKey("PredmetiId", "ProfesoriId");

                    b.HasIndex("ProfesoriId");

                    b.ToTable("PredmetProfesor");
                });

            modelBuilder.Entity("PredmetStudent", b =>
                {
                    b.Property<int>("PredmetiId")
                        .HasColumnType("int");

                    b.Property<int>("StudentiId")
                        .HasColumnType("int");

                    b.HasKey("PredmetiId", "StudentiId");

                    b.HasIndex("StudentiId");

                    b.ToTable("PredmetStudent");
                });

            modelBuilder.Entity("AsistentPredmet", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Asistent", null)
                        .WithMany()
                        .HasForeignKey("AsistentiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blanketomat.API.Models.Predmet", null)
                        .WithMany()
                        .HasForeignKey("PredmetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlanketPitanje", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Blanket", null)
                        .WithMany()
                        .HasForeignKey("BlanketiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blanketomat.API.Models.Pitanje", null)
                        .WithMany()
                        .HasForeignKey("PitanjaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlanketZadatak", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Blanket", null)
                        .WithMany()
                        .HasForeignKey("BlanketiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blanketomat.API.Models.Zadatak", null)
                        .WithMany()
                        .HasForeignKey("ZadaciId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blanketomat.API.Models.Asistent", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Smer", "Smer")
                        .WithMany("Asistenti")
                        .HasForeignKey("SmerId");

                    b.Navigation("Smer");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Blanket", b =>
                {
                    b.HasOne("Blanketomat.API.Models.PonavljanjeRoka", "IspitniRok")
                        .WithMany()
                        .HasForeignKey("IspitniRokId");

                    b.HasOne("Blanketomat.API.Models.Oblast", null)
                        .WithMany("Blanketi")
                        .HasForeignKey("OblastId");

                    b.HasOne("Blanketomat.API.Models.Podoblast", null)
                        .WithMany("Blanketi")
                        .HasForeignKey("PodoblastId");

                    b.Navigation("IspitniRok");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Pitanje", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Oblast", "Oblast")
                        .WithMany("Pitanja")
                        .HasForeignKey("OblastId");

                    b.HasOne("Blanketomat.API.Models.Slika", "Slika")
                        .WithMany("Pitanja")
                        .HasForeignKey("SlikaId");

                    b.Navigation("Oblast");

                    b.Navigation("Slika");
                });

            modelBuilder.Entity("Blanketomat.API.Models.PonavljanjeRoka", b =>
                {
                    b.HasOne("Blanketomat.API.Models.IspitniRok", "IspitniRok")
                        .WithMany("Ponavljanja")
                        .HasForeignKey("IspitniRokId");

                    b.Navigation("IspitniRok");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Predmet", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Akreditacija", "Akreditacija")
                        .WithMany("Predmeti")
                        .HasForeignKey("AkreditacijaId");

                    b.HasOne("Blanketomat.API.Models.Smer", "Smer")
                        .WithMany("Predmeti")
                        .HasForeignKey("SmerId");

                    b.Navigation("Akreditacija");

                    b.Navigation("Smer");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Profesor", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Smer", "Smer")
                        .WithMany("Profesori")
                        .HasForeignKey("SmerId");

                    b.Navigation("Smer");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Student", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Akreditacija", "Akreditacija")
                        .WithMany("Studenti")
                        .HasForeignKey("AkreditacijaId");

                    b.HasOne("Blanketomat.API.Models.Smer", "Smer")
                        .WithMany("Studenti")
                        .HasForeignKey("SmerId");

                    b.Navigation("Akreditacija");

                    b.Navigation("Smer");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Zadatak", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Oblast", "Oblast")
                        .WithMany("Zadaci")
                        .HasForeignKey("OblastId");

                    b.HasOne("Blanketomat.API.Models.Podoblast", "Podoblast")
                        .WithMany("Zadaci")
                        .HasForeignKey("PodoblastId");

                    b.HasOne("Blanketomat.API.Models.Slika", "Slika")
                        .WithMany("Zadaci")
                        .HasForeignKey("SlikaId");

                    b.Navigation("Oblast");

                    b.Navigation("Podoblast");

                    b.Navigation("Slika");
                });

            modelBuilder.Entity("PredmetProfesor", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Predmet", null)
                        .WithMany()
                        .HasForeignKey("PredmetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blanketomat.API.Models.Profesor", null)
                        .WithMany()
                        .HasForeignKey("ProfesoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PredmetStudent", b =>
                {
                    b.HasOne("Blanketomat.API.Models.Predmet", null)
                        .WithMany()
                        .HasForeignKey("PredmetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blanketomat.API.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blanketomat.API.Models.Akreditacija", b =>
                {
                    b.Navigation("Predmeti");

                    b.Navigation("Studenti");
                });

            modelBuilder.Entity("Blanketomat.API.Models.IspitniRok", b =>
                {
                    b.Navigation("Ponavljanja");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Oblast", b =>
                {
                    b.Navigation("Blanketi");

                    b.Navigation("Pitanja");

                    b.Navigation("Zadaci");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Podoblast", b =>
                {
                    b.Navigation("Blanketi");

                    b.Navigation("Zadaci");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Slika", b =>
                {
                    b.Navigation("Pitanja");

                    b.Navigation("Zadaci");
                });

            modelBuilder.Entity("Blanketomat.API.Models.Smer", b =>
                {
                    b.Navigation("Asistenti");

                    b.Navigation("Predmeti");

                    b.Navigation("Profesori");

                    b.Navigation("Studenti");
                });
#pragma warning restore 612, 618
        }
    }
}
